/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import clases.NumeroLinea;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Mr.Turtle007
 */
public class IDE extends javax.swing.JFrame {
    
    private File archivoActual;
    private boolean verificarArchivoGuardar = false;
    private NumeroLinea numerolinea;

    /**
     * Creates new form pantallaPrincipal
     */
    public IDE() {
        initComponents();
        
        //bloquea la opción maximizar pantalla
        this.setResizable(false);
        
        //pone el frame ajustado a pantalla completa
        this.setExtendedState(MAXIMIZED_BOTH);
        
        //se ponen sin color porque en la parte del diseño no hace caso la PTM!!!
        lblCodigo.setBackground(null);
        lblVariables.setBackground(null);
        lblSalida.setBackground(null);
        
        numeroDeLinea();
        colorDePalabrasReservadas();
        cerrarAplicacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDeVentanas = new javax.swing.JPanel();
        lblCodigo = new org.edisoncor.gui.label.LabelRect();
        lblVariables = new org.edisoncor.gui.label.LabelRect();
        lblSalida = new org.edisoncor.gui.label.LabelRect();
        jVariables = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodigoC = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSalida = new javax.swing.JTextArea();
        menuArriba = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        itemNuevo = new javax.swing.JMenuItem();
        itemAbrirArchivo = new javax.swing.JMenuItem();
        itemCerrar = new javax.swing.JMenuItem();
        itemGuardar = new javax.swing.JMenuItem();
        itemGuardarComo = new javax.swing.JMenuItem();
        itemSalir = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        itemCopiar = new javax.swing.JMenuItem();
        itemPegar = new javax.swing.JMenuItem();
        itemCortar = new javax.swing.JMenuItem();
        menuCompilar = new javax.swing.JMenu();
        menuEjecutar = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analizador de Código en C");
        setForeground(new java.awt.Color(0, 0, 0));
        setName("pantPrincipal"); // NOI18N

        panelDeVentanas.setBackground(new java.awt.Color(0, 51, 102));
        panelDeVentanas.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        panelDeVentanas.setName("panel1"); // NOI18N

        lblCodigo.setText("Código en C");
        lblCodigo.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        lblVariables.setText("Variables en uso");
        lblVariables.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        lblSalida.setText("Salida de código");
        lblSalida.setColorDeBorde(new java.awt.Color(0, 51, 204));
        lblSalida.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        jVariables.setBackground(new java.awt.Color(51, 51, 51));
        jVariables.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jVariables.setName("panel1"); // NOI18N

        javax.swing.GroupLayout jVariablesLayout = new javax.swing.GroupLayout(jVariables);
        jVariables.setLayout(jVariablesLayout);
        jVariablesLayout.setHorizontalGroup(
            jVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );
        jVariablesLayout.setVerticalGroup(
            jVariablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        txtCodigoC.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        txtCodigoC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoCKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtCodigoC);

        txtSalida.setColumns(20);
        txtSalida.setRows(5);
        jScrollPane1.setViewportView(txtSalida);

        javax.swing.GroupLayout panelDeVentanasLayout = new javax.swing.GroupLayout(panelDeVentanas);
        panelDeVentanas.setLayout(panelDeVentanasLayout);
        panelDeVentanasLayout.setHorizontalGroup(
            panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDeVentanasLayout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(347, 347, 347)
                .addComponent(lblVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addComponent(lblSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
            .addGroup(panelDeVentanasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelDeVentanasLayout.setVerticalGroup(
            panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDeVentanasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jVariables, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        menuArriba.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        menuArchivo.setText("Archivo");

        itemNuevo.setText("Nuevo");
        itemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemNuevo);

        itemAbrirArchivo.setText("Abrir archivo");
        itemAbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirArchivoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemAbrirArchivo);

        itemCerrar.setText("Cerrar");
        itemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCerrarActionPerformed(evt);
            }
        });
        menuArchivo.add(itemCerrar);

        itemGuardar.setText("Guardar");
        itemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardar);

        itemGuardarComo.setText("Guardar como...");
        itemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardarComo);

        itemSalir.setText("Salir");
        itemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(itemSalir);

        menuArriba.add(menuArchivo);

        menuEditar.setText("Editar");

        itemCopiar.setText("Copiar");
        itemCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopiarActionPerformed(evt);
            }
        });
        menuEditar.add(itemCopiar);

        itemPegar.setText("Pegar");
        itemPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPegarActionPerformed(evt);
            }
        });
        menuEditar.add(itemPegar);

        itemCortar.setText("Cortar");
        itemCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCortarActionPerformed(evt);
            }
        });
        menuEditar.add(itemCortar);

        menuArriba.add(menuEditar);

        menuCompilar.setText("Compilar");
        menuArriba.add(menuCompilar);

        menuEjecutar.setText("Ejecutar");

        jMenuItem9.setText("Paso a paso (Recomendado)");
        menuEjecutar.add(jMenuItem9);

        jMenuItem10.setText("Todo el código");
        menuEjecutar.add(jMenuItem10);

        menuArriba.add(menuEjecutar);

        setJMenuBar(menuArriba);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDeVentanas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDeVentanas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void itemAbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirArchivoActionPerformed
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?", "Guardar", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    ventanaGuardar();
                }
            }
        }
        
        
        //si se selecciona la opción Abrir... se hará lo siguente
        JFileChooser archivoAbrir = new JFileChooser();
        
        //que solo se pueda seleccionar un archivo
        archivoAbrir.setMultiSelectionEnabled(false);
        
        //solo selecciones de ficheros
        archivoAbrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //respuesta ante la opcion de selección del archivo
        int seleccion = archivoAbrir.showOpenDialog(this.getContentPane());
        
        //si se ha seleccionado alguno...
        if(seleccion == JFileChooser.APPROVE_OPTION){
            //la seleccion se debe guardar en un nuevo archivo
            archivoActual = archivoAbrir.getSelectedFile();
            
            try(FileReader archivoLeer = new FileReader(this.archivoActual)){
                String cadena = "";
                int valor = archivoLeer.read();
                
                //se hace todo el contenido en caracteres
                while(valor != -1){
                    cadena += (char) valor;
                    valor = archivoLeer.read();
                }
                
                //se pone en el txt del Código
                txtCodigoC.setText(cadena);
                
                //el archivo no tendrá modificación, ya que apenas se abrió
                verificarArchivoGuardar = true;
                
            } catch (FileNotFoundException ex) {
                //configuraciones de que el archivo no se encuentre
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Oopsi! No pude encontrar el archivo :(", "Archivo no encontrado", JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex) {
                //configuraciones de otros errores o alguna falla
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Ay! No puedo abrir el archivo, perdona :\"3", "Error en el archivo", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_itemAbrirArchivoActionPerformed

    private void itemPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPegarActionPerformed
        //pegará lo que se tiene copiado
        txtCodigoC.paste();
    }//GEN-LAST:event_itemPegarActionPerformed

    private void itemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNuevoActionPerformed
        //simplemente preguntará si se quiere uno nuevo y hacer las configuraciones necesarias
        if(txtCodigoC.getText().equals("")){
            //este solo dejará la parte del "código" vacia
            txtCodigoC.setText("");
            archivoActual = null;
        }
        else{
            int input = JOptionPane.showConfirmDialog(null, "¿Deseas crear un nuevo archivo?", "Archivo nuevo", 
                JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            // 0=ok, 2=cancel
            if(input == 0){
                //si aceptó, tambien debemos preguntarle si desea guardar su archivo, solo si fue editado
                if(verificarArchivoGuardar == false || archivoActual == null){
                    int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?", "Guardar", 
                        JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    
                    // 0=ok, 2=cancel
                    if(confirmacion == 0){
                        //guarda el contenido
                        ventanaGuardar();
                        
                        //si se seleccionó un archivo, se borrará
                        if(verificarArchivoGuardar == true){
                            //este solo dejará la parte del "código" vacia
                            txtCodigoC.setText("");
                            archivoActual = null;
                        }
                    }
                    else{
                        //este solo dejará la parte del "código" vacia
                        txtCodigoC.setText("");
                        archivoActual = null;
                    }
                }
            }
        }
    }//GEN-LAST:event_itemNuevoActionPerformed

    private void itemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalirActionPerformed
        confirmarSalida();
    }//GEN-LAST:event_itemSalirActionPerformed

    private void itemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarActionPerformed
        //si el archivo no existe, se guardará como nuevo
        if(archivoActual == null){
            ventanaGuardar();
        }
        else{
            //simplemente se guarda
            escribirArchivo();
        }
    }//GEN-LAST:event_itemGuardarActionPerformed

    private void itemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarComoActionPerformed
        ventanaGuardar();
    }//GEN-LAST:event_itemGuardarComoActionPerformed

    private void itemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCerrarActionPerformed
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?", "Guardar", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    ventanaGuardar();

                    //si se seleccionó un archivo, se borrará
                    if(verificarArchivoGuardar == true){
                        //este solo dejará la parte del "código" vacia
                        txtCodigoC.setText("");
                        archivoActual = null;
                    }
                }
            }
            else{
                //este solo dejará la parte del "código" vacia
                txtCodigoC.setText("");
                archivoActual = null;
            }
        }
    }//GEN-LAST:event_itemCerrarActionPerformed

    private void itemCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopiarActionPerformed
        //copiará el texto seleccionado
        txtCodigoC.copy();
    }//GEN-LAST:event_itemCopiarActionPerformed

    private void itemCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCortarActionPerformed
        //cortará el texto seleccionado
        txtCodigoC.cut();
    }//GEN-LAST:event_itemCortarActionPerformed

    private void txtCodigoCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoCKeyReleased
        //esta sección de código indicará que no se han guardado cambios
        
        int keyCode = evt.getKeyCode();
        
        if((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57)
                || (keyCode >= 97 && keyCode <= 122) || (keyCode != 27 && !(keyCode >= 37
                && keyCode <= 40) && !(keyCode >= 16
                && keyCode <= 18) && keyCode != 524
                && keyCode != 20)){
            
            if(!getTitle().contains("*")){
                setTitle("[Analizador de Código en C]*");
                verificarArchivoGuardar = false;
            }
        
        }
    }//GEN-LAST:event_txtCodigoCKeyReleased

    private void ventanaGuardar(){
        JFileChooser archivoGuardar = new JFileChooser();

        //que solo se pueda seleccionar un archivo
        archivoGuardar.setMultiSelectionEnabled(false);

        //solo selecciones de ficheros
        archivoGuardar.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int seleccion = archivoGuardar.showSaveDialog(this.getContentPane());

        //si la opcion es guardar, pasa a lo siguiente
        if(seleccion == JFileChooser.APPROVE_OPTION){
            archivoActual = archivoGuardar.getSelectedFile();

            //procede a sobrescribir en el actual
            escribirArchivo();
            
            //si se guardó
            verificarArchivoGuardar = true;
            
            //se pone el nombre sin sin "*"
            setTitle("Analizador de Código en C");
        }
    }
    
    private void escribirArchivo(){
        try(FileWriter archivoEscribir = new FileWriter(archivoActual)){
            //se le pasa el contenido de todo el apartado de "codigo"
            archivoEscribir.write(txtCodigoC.getText());
            
            //si se guardó
            verificarArchivoGuardar = true;
            
            //se pone el nombre sin sin "*"
            setTitle("Analizador de Código en C");
        }
        catch (IOException ex) {
            //configuraciones de otros errores o alguna falla
            System.out.println(ex.getMessage());
        }
    }
    
    /**
     * Este método usa la clase NumeroLinea para realizar dicha tarea
     */
    private void numeroDeLinea() {
        numerolinea = new NumeroLinea(txtCodigoC);
        jScrollPane2.setRowHeaderView(numerolinea);
    }
    
    /**
     * Este método confirmará el cerrar la aplicacion
     */
    public void cerrarAplicacion(){
        try{
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                confirmarSalida();
            }});
            this.setVisible(true);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Este método confirmará la salida del programa
     */
    public void confirmarSalida(){
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?", "Guardar", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    ventanaGuardar();
                }
            }
        }
        
        //simplemente preguntará si se quiere salir y hacer las configuraciones necesarias
        int input = JOptionPane.showConfirmDialog(null, "¿Deseas salir del programa?", "Salir", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

        // 0=ok, 2=cancel
        if(input == 0){
            //cerrar programa
            System.exit(0);
        }
    }
    
    /**
     * Método para encontrar las últimas cadenas
     */
    private int findLastNonWordChar(String text, int index){
        //encontrar las últimas
        while(--index >= 0){
            // \\ = [A-Za-z0-9]
            if(String.valueOf(text.charAt(index)).matches("\\W")){
                break;
            }
        }
        
        //saber donde nos encontramos
        return index;
    }
    
    /**
     * Método para encontrar las primeras cadenas
     */
    private int findFirstNonWordChar(String text, int index){
        //encontrar las últimas
        while(index < text.length()){
            // \\ = [A-Za-z0-9]
            if(String.valueOf(text.charAt(index)).matches("\\W")){
                break;
            }
            index++;
        }
        
        //saber donde nos encontramos
        return index;
    }
    
    /**
     * Método para pintar las palabras reservadas
     */
    private void colorDePalabrasReservadas(){
        final StyleContext cont = StyleContext.getDefaultStyleContext();
        
        //colores (se declaran en RGB)
        final AttributeSet att_rojo = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(249, 249, 249));
        final AttributeSet att_verde = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 128, 0));
        final AttributeSet att_cafe = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(128, 0, 0));
        final AttributeSet att_azul = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 128));
        final AttributeSet att_negro = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 0, 0));
        final AttributeSet att_dorado = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(128, 128, 0));
        
        //estilo
        DefaultStyledDocument doc = new DefaultStyledDocument(){
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);
                
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                
                if(before < 0){
                    before = 0;
                }
                
                int after = findFirstNonWordChar(text, offset+str.length());
                int wordL = before;
                int wordR = before;
                
                while(wordR <= after){
                    if(wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")){
                        if(text.substring(wordL, wordR).matches("(\\W)*(if|else|do|while|for|switch|case)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_azul, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(void|bit|short|int|long|float|double|char)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_dorado, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(main|printf|scanf|pow|sqrt|getch)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_verde, false);
                        }
                        else {
                            setCharacterAttributes(wordL, wordR - wordL, att_negro, false);
                        }
                        
                        wordL = wordR;
                    }
                    wordR++;
                }
            }
            
            public void remove(int offs, int len) throws BadLocationException {
                super.remove(offs, len);
                
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                
                if(before < 0){
                    before = 0;
                }
            }
        };
        
        JTextPane txt = new JTextPane(doc);
        String temp = txtCodigoC.getText();
        txtCodigoC.setStyledDocument(txt.getStyledDocument());
        txtCodigoC.setText(temp);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAbrirArchivo;
    private javax.swing.JMenuItem itemCerrar;
    private javax.swing.JMenuItem itemCopiar;
    private javax.swing.JMenuItem itemCortar;
    private javax.swing.JMenuItem itemGuardar;
    private javax.swing.JMenuItem itemGuardarComo;
    private javax.swing.JMenuItem itemNuevo;
    private javax.swing.JMenuItem itemPegar;
    private javax.swing.JMenuItem itemSalir;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jVariables;
    private org.edisoncor.gui.label.LabelRect lblCodigo;
    private org.edisoncor.gui.label.LabelRect lblSalida;
    private org.edisoncor.gui.label.LabelRect lblVariables;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuArriba;
    private javax.swing.JMenu menuCompilar;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JMenu menuEjecutar;
    private javax.swing.JPanel panelDeVentanas;
    private javax.swing.JTextPane txtCodigoC;
    private javax.swing.JTextArea txtSalida;
    // End of variables declaration//GEN-END:variables

}

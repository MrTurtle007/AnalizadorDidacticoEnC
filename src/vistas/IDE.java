/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import clases.NumeroLinea;
import clases.Sintax;
import clases.Tokens;
import clases.claseLexer;
import com.formdev.flatlaf.FlatIntelliJLaf;
import compilerTools.CodeBlock;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Mr.Turtle007
 */
public class IDE extends javax.swing.JFrame {
    
    private File archivoActual;
    private boolean verificarArchivoGuardar = false;
    private NumeroLinea numerolinea;
    //este filtrará los archivos con extensión de C
    private FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos legibles para C", "cpp", "c", "txt");
    //guardará el nombre del archivo
    private String nombreArchivo = "Analizador de Código en C";
    
    /**
     * 0 = No se ha realizado el análisis sintáctico
     * 1 = Se realizó el analisis
     * 2 = El análisis tiene errores
     */
    private int realizacionSintasix = 0;

    /**
     * Creates new form pantallaPrincipal
     */
    public IDE() {
        initComponents();
        
        //bloquea la opción maximizar pantalla
        this.setResizable(false);
        
        //pone el frame ajustado a pantalla completa
        this.setExtendedState(MAXIMIZED_BOTH);
        
        //se ponen sin color porque en la parte del diseño no hace caso la PTM!!!
        lblCodigo.setBackground(null);
        lblVariables.setBackground(null);
        lblSalida.setBackground(null);
        txtSalida.setForeground(Color.white);
        
        this.setTitle(nombreArchivo);
        numeroDeLinea();
        colorDePalabrasReservadas();
        cerrarAplicacion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDeVentanas = new javax.swing.JPanel();
        lblCodigo = new org.edisoncor.gui.label.LabelRect();
        lblVariables = new org.edisoncor.gui.label.LabelRect();
        lblSalida = new org.edisoncor.gui.label.LabelRect();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCodigoC = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSalida = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtVariables = new javax.swing.JTextPane();
        menuArriba = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        itemNuevo = new javax.swing.JMenuItem();
        itemAbrirArchivo = new javax.swing.JMenuItem();
        itemCerrar = new javax.swing.JMenuItem();
        itemGuardar = new javax.swing.JMenuItem();
        itemGuardarComo = new javax.swing.JMenuItem();
        itemSalir = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        itemCopiar = new javax.swing.JMenuItem();
        itemPegar = new javax.swing.JMenuItem();
        itemCortar = new javax.swing.JMenuItem();
        itemLimpiarSalida = new javax.swing.JMenuItem();
        menuCompilar = new javax.swing.JMenu();
        itemAnalisisLexico = new javax.swing.JMenuItem();
        itemAnalisisSintactico = new javax.swing.JMenuItem();
        itemAnalisisSemantico = new javax.swing.JMenuItem();
        menuEjecutar = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        itemEjecutarTodo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Analizador de Código en C");
        setForeground(new java.awt.Color(0, 0, 0));
        setName("pantPrincipal"); // NOI18N

        panelDeVentanas.setBackground(new java.awt.Color(0, 51, 102));
        panelDeVentanas.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        panelDeVentanas.setName("panel1"); // NOI18N

        lblCodigo.setText("Código en C");
        lblCodigo.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        lblVariables.setText("Variables en uso");
        lblVariables.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        lblSalida.setText("Pantalla de Salida");
        lblSalida.setColorDeBorde(new java.awt.Color(0, 51, 204));
        lblSalida.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N

        txtCodigoC.setBackground(new java.awt.Color(0, 0, 0));
        txtCodigoC.setFont(new java.awt.Font("Consolas", 1, 16)); // NOI18N
        txtCodigoC.setForeground(new java.awt.Color(255, 255, 255));
        txtCodigoC.setCaretColor(new java.awt.Color(0, 255, 51));
        txtCodigoC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoCKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtCodigoC);

        txtSalida.setEditable(false);
        txtSalida.setBackground(new java.awt.Color(0, 51, 51));
        txtSalida.setColumns(20);
        txtSalida.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        txtSalida.setRows(5);
        txtSalida.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        txtSalida.setSelectionColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(txtSalida);

        txtVariables.setEditable(false);
        txtVariables.setBackground(new java.awt.Color(102, 102, 102));
        txtVariables.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        txtVariables.setForeground(new java.awt.Color(0, 0, 0));
        txtVariables.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtVariablesKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(txtVariables);

        javax.swing.GroupLayout panelDeVentanasLayout = new javax.swing.GroupLayout(panelDeVentanas);
        panelDeVentanas.setLayout(panelDeVentanasLayout);
        panelDeVentanasLayout.setHorizontalGroup(
            panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDeVentanasLayout.createSequentialGroup()
                .addGap(177, 177, 177)
                .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(347, 347, 347)
                .addComponent(lblVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 338, Short.MAX_VALUE)
                .addComponent(lblSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
            .addGroup(panelDeVentanasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        panelDeVentanasLayout.setVerticalGroup(
            panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDeVentanasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVariables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeVentanasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE))
                .addContainerGap())
        );

        menuArriba.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        menuArchivo.setText("Archivo");

        itemNuevo.setText("Nuevo");
        itemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemNuevo);

        itemAbrirArchivo.setText("Abrir archivo");
        itemAbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAbrirArchivoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemAbrirArchivo);

        itemCerrar.setText("Cerrar");
        itemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCerrarActionPerformed(evt);
            }
        });
        menuArchivo.add(itemCerrar);

        itemGuardar.setText("Guardar");
        itemGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardar);

        itemGuardarComo.setText("Guardar como...");
        itemGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(itemGuardarComo);

        itemSalir.setText("Salir");
        itemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(itemSalir);

        menuArriba.add(menuArchivo);

        menuEditar.setText("Editar");

        itemCopiar.setText("Copiar");
        itemCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopiarActionPerformed(evt);
            }
        });
        menuEditar.add(itemCopiar);

        itemPegar.setText("Pegar");
        itemPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPegarActionPerformed(evt);
            }
        });
        menuEditar.add(itemPegar);

        itemCortar.setText("Cortar");
        itemCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCortarActionPerformed(evt);
            }
        });
        menuEditar.add(itemCortar);

        itemLimpiarSalida.setText("Limpiar pantalla de salida");
        itemLimpiarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemLimpiarSalidaActionPerformed(evt);
            }
        });
        menuEditar.add(itemLimpiarSalida);

        menuArriba.add(menuEditar);

        menuCompilar.setText("Compilar");

        itemAnalisisLexico.setText("Análisis Léxico");
        itemAnalisisLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAnalisisLexicoActionPerformed(evt);
            }
        });
        menuCompilar.add(itemAnalisisLexico);

        itemAnalisisSintactico.setText("Análisis Sintáctico");
        itemAnalisisSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAnalisisSintacticoActionPerformed(evt);
            }
        });
        menuCompilar.add(itemAnalisisSintactico);

        itemAnalisisSemantico.setText("Análisis Semántico");
        itemAnalisisSemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAnalisisSemanticoActionPerformed(evt);
            }
        });
        menuCompilar.add(itemAnalisisSemantico);

        menuArriba.add(menuCompilar);

        menuEjecutar.setText("Ejecutar");

        jMenuItem9.setText("Paso a paso (Recomendado)");
        menuEjecutar.add(jMenuItem9);

        itemEjecutarTodo.setText("Todo el código");
        itemEjecutarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEjecutarTodoActionPerformed(evt);
            }
        });
        menuEjecutar.add(itemEjecutarTodo);

        menuArriba.add(menuEjecutar);

        setJMenuBar(menuArriba);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDeVentanas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDeVentanas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void itemAbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAbrirArchivoActionPerformed
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?",
                        "Guardar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    //si el archivo no existe, se guardará como nuevo
                    if(archivoActual == null){
                        ventanaGuardar();
                    }
                    else{
                        //simplemente se guarda
                        escribirArchivo();
                    }
                }
            }
        } 
        
        //si se selecciona la opción Abrir... se hará lo siguente
        JFileChooser archivoAbrir = new JFileChooser();
        
        //Se visualizarán solo extensiones para C
        archivoAbrir.setFileFilter(filter);
        
        //que solo se pueda seleccionar un archivo
        archivoAbrir.setMultiSelectionEnabled(false);
        
        //solo selecciones de ficheros
        archivoAbrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        //respuesta ante la opcion de selección del archivo
        int seleccion = archivoAbrir.showOpenDialog(this.getContentPane());
        
        //si se ha seleccionado alguno...
        if(seleccion == JFileChooser.APPROVE_OPTION){
            //la seleccion se debe guardar en un nuevo archivo
            archivoActual = archivoAbrir.getSelectedFile();
            
            try(FileReader archivoLeer = new FileReader(this.archivoActual)){
                String cadena = "";
                int valor = archivoLeer.read();
                
                //se hace todo el contenido en caracteres
                while(valor != -1){
                    cadena += (char) valor;
                    valor = archivoLeer.read();
                }
                
                //se pone en el txt del Código
                txtCodigoC.setText(cadena);
                
                //se obtendrá el nombre de archivo
                nombreArchivo = archivoAbrir.getSelectedFile().getName();
                setTitle(nombreArchivo);
                
                //el archivo no tendrá modificación, ya que apenas se abrió
                verificarArchivoGuardar = true;
                
            } catch (FileNotFoundException ex) {
                //configuraciones de que el archivo no se encuentre
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Oopsi! No pude encontrar el archivo :(", "Archivo no encontrado", 
                        JOptionPane.WARNING_MESSAGE);
            } catch (IOException ex) {
                //configuraciones de otros errores o alguna falla
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(null, "Ay! No puedo abrir el archivo, perdona :\"3", "Error en el archivo", 
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_itemAbrirArchivoActionPerformed

    private void itemPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPegarActionPerformed
        //pegará lo que se tiene copiado
        txtCodigoC.paste();
    }//GEN-LAST:event_itemPegarActionPerformed

    private void itemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNuevoActionPerformed
        //simplemente preguntará si se quiere uno nuevo y hacer las configuraciones necesarias
        if(txtCodigoC.getText().equals("")){
            //este solo dejará la parte del "código" vacia
            txtCodigoC.setText("");
            archivoActual = null;
            setTitle("Analizador de Código en C");
        }
        else{
            int input = JOptionPane.showConfirmDialog(null, "¿Deseas crear un nuevo archivo?", "Archivo nuevo", 
                JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            
            // 0=ok, 2=cancel
            if(input == 0){
                //si aceptó, tambien debemos preguntarle si desea guardar su archivo, solo si fue editado
                if(verificarArchivoGuardar == false || archivoActual == null){
                    int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?",
                            "Guardar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    
                    // 0=ok, 2=cancel
                    if(confirmacion == 0){
                        //guarda el contenido
                        ventanaGuardar();
                        
                        //si se seleccionó un archivo, se borrará
                        if(verificarArchivoGuardar == true){
                            //este solo dejará la parte del "código" vacia
                            txtCodigoC.setText("");
                            archivoActual = null;
                            setTitle("Analizador de Código en C");
                        }
                    }
                    else{
                        //este solo dejará la parte del "código" vacia
                        txtCodigoC.setText("");
                        archivoActual = null;
                        setTitle("Analizador de Código en C");
                    }
                }
                else{
                    //este solo dejará la parte del "código" vacia
                    txtCodigoC.setText("");
                    archivoActual = null;
                    setTitle("Analizador de Código en C");
                }
            }
        }
    }//GEN-LAST:event_itemNuevoActionPerformed

    private void itemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSalirActionPerformed
        confirmarSalida();
    }//GEN-LAST:event_itemSalirActionPerformed

    private void itemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarActionPerformed
        //si el archivo no existe, se guardará como nuevo
        if(archivoActual == null){
            ventanaGuardar();
        }
        else{
            //simplemente se guarda
            escribirArchivo();
        }
    }//GEN-LAST:event_itemGuardarActionPerformed

    private void itemGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemGuardarComoActionPerformed
        ventanaGuardar();
    }//GEN-LAST:event_itemGuardarComoActionPerformed

    private void itemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCerrarActionPerformed
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?",
                        "Guardar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    //si el archivo no existe, se guardará como nuevo
                    if(archivoActual == null){
                        ventanaGuardar();
                    }
                    else{
                        //simplemente se guarda
                        escribirArchivo();
                    }

                    //si se seleccionó un archivo, se borrará
                    if(verificarArchivoGuardar == true){
                        //este solo dejará la parte del "código" vacia
                        txtCodigoC.setText("");
                        
                        archivoActual = null;
                        setTitle("Analizador de Código en C");
                    }
                }
                else{
                    //este solo dejará la parte del "código" vacia
                    txtCodigoC.setText("");
                    archivoActual = null;
                    setTitle("Analizador de Código en C");
                }
            }
            else{
                //este solo dejará la parte del "código" vacia
                txtCodigoC.setText("");
                archivoActual = null;
                setTitle("Analizador de Código en C");
            }
        }
    }//GEN-LAST:event_itemCerrarActionPerformed

    private void itemCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopiarActionPerformed
        //copiará el texto seleccionado
        txtCodigoC.copy();
    }//GEN-LAST:event_itemCopiarActionPerformed

    private void itemCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCortarActionPerformed
        //cortará el texto seleccionado
        txtCodigoC.cut();
    }//GEN-LAST:event_itemCortarActionPerformed

    private void txtCodigoCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoCKeyReleased
        //esta sección de código indicará que no se han guardado cambios

        int keyCode = evt.getKeyCode();

        if((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57)
            || (keyCode >= 97 && keyCode <= 122) || (keyCode != 27 && !(keyCode >= 37
                && keyCode <= 40) && !(keyCode >= 16
                && keyCode <= 18) && keyCode != 524
            && keyCode != 20)){

            if(!getTitle().contains("*")){
                setTitle("[" + nombreArchivo + "]*");
                verificarArchivoGuardar = false;
            }
            
            realizacionSintasix = 0;

        }
    }//GEN-LAST:event_txtCodigoCKeyReleased

    private void itemAnalisisLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAnalisisLexicoActionPerformed
        try {
            if(!txtCodigoC.getText().equals("")){
                txtSalida.setText("");
                analizarLexico();
            }
            else{
                JOptionPane.showMessageDialog(null, "Abre los ojos 7-7 ¿cómo puedo analizar algo vacío?", "Error al generar análisis léxico", 
                        JOptionPane.WARNING_MESSAGE);
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Vaya, ¿eres hacker? este archivo no pudo ser analizado léxicamente :\"3", "Error al generar análisis léxico", 
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemAnalisisLexicoActionPerformed

    private void itemLimpiarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemLimpiarSalidaActionPerformed
        //limpiará el área de salida
        txtSalida.setText("");
    }//GEN-LAST:event_itemLimpiarSalidaActionPerformed

    private void itemAnalisisSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAnalisisSintacticoActionPerformed
        String ST = txtCodigoC.getText();
        Sintax s = new Sintax(new clases.LexerCup(new StringReader(ST)));
        
        try{
            if(!txtCodigoC.getText().equals("")){
                txtSalida.setText("");
                s.parse();
                txtSalida.setText("Análisis realizado correctamente");
                txtSalida.setForeground(Color.green);
                
                realizacionSintasix = 1;
            }
            else{
                JOptionPane.showMessageDialog(null, "Abre los ojos 7-7 ¿cómo puedo analizar algo vacío?", "Error al generar análisis sintáctico", 
                        JOptionPane.WARNING_MESSAGE);
            }
        }
        catch(Exception ex){
            Symbol sym = s.getS();
            txtSalida.setText("Error de sintaxis. Línea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtSalida.setForeground(Color.red);
            realizacionSintasix = 2;
        }
    }//GEN-LAST:event_itemAnalisisSintacticoActionPerformed

    private void itemAnalisisSemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAnalisisSemanticoActionPerformed
        try {
            //No se realizó análisis sintáctico
            if(realizacionSintasix == 0){
                JOptionPane.showMessageDialog(null, "Antes, se necesita realizar el análisis sintáctico", "Problema al generar el análisis semántico", 
                        JOptionPane.WARNING_MESSAGE);
            }
            //Si se realizó correctamente
            else if(realizacionSintasix == 1){
                txtSalida.setText("");
                analizarSemantico();
            }
            //Tiene errores
            else if(realizacionSintasix == 2){
                JOptionPane.showMessageDialog(null, "Tu archivo tiene errores sintácticos", "Error al generar el análisis semántico", 
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Vaya, ¿eres hacker? este archivo no pudo ser analizado semánticamente :\"3", "Error al generar análisis semántico", 
                        JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemAnalisisSemanticoActionPerformed

    private void itemEjecutarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEjecutarTodoActionPerformed
        //No se realizó análisis sintáctico
        if(realizacionSintasix == 0){
            JOptionPane.showMessageDialog(null, "¿A dónde? ¿A dónde?, Necesitas compilar", "Compilación no realizada", 
                    JOptionPane.WARNING_MESSAGE);
        }
        //Si se realizó correctamente
        else if(realizacionSintasix == 1){
            txtSalida.setText("");
            
            try{
                analisisDelCodigo();
            } catch (IOException ex){
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Tiene errores
        else if(realizacionSintasix == 2){
            JOptionPane.showMessageDialog(null, "Tu archivo tiene errores sintácticos, no se puede ejecutar así", "Errores sintácticos", 
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemEjecutarTodoActionPerformed

    private void txtVariablesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtVariablesKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVariablesKeyReleased

    private void ventanaGuardar(){
        JFileChooser archivoGuardar = new JFileChooser();
        
        //Se visualizarán solo extensiones para C
        archivoGuardar.setFileFilter(filter);
        archivoGuardar.setSelectedFile(new File("Ejemplo_C.txt"));

        //que solo se pueda seleccionar un archivo
        archivoGuardar.setMultiSelectionEnabled(false);

        //solo selecciones de ficheros
        archivoGuardar.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int seleccion = archivoGuardar.showSaveDialog(this.getContentPane());

        //si la opcion es guardar, pasa a lo siguiente
        if(seleccion == JFileChooser.APPROVE_OPTION){
            archivoActual = archivoGuardar.getSelectedFile();
            
            //se le asigna el nombre del archivo
            /*Buscar un método para guardar por default en ".txt"*/

            //procede a sobrescribir en el actual
            escribirArchivo();
            
            //si se guardó
            verificarArchivoGuardar = true;
            
            //se pone el nombre sin sin "*"
            setTitle(nombreArchivo);
        }
    }
    
    private void escribirArchivo(){
        try(FileWriter archivoEscribir = new FileWriter(archivoActual)){
            //se le pasa el contenido de todo el apartado de "codigo"
            archivoEscribir.write(txtCodigoC.getText());
            
            //si se guardó
            verificarArchivoGuardar = true;
            
            //se pone el nombre sin sin "*"
            setTitle(nombreArchivo);
        }
        catch (IOException ex) {
            //configuraciones de otros errores o alguna falla
            System.out.println(ex.getMessage());
        }
    }
    
    /**
     * Este método usa la clase NumeroLinea para realizar dicha tarea
     */
    private void numeroDeLinea() {
        numerolinea = new NumeroLinea(txtCodigoC);
        jScrollPane2.setRowHeaderView(numerolinea);
    }
    
    /**
     * Este método confirmará el cerrar la aplicacion
     */
    public void cerrarAplicacion(){
        try{
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                confirmarSalida();
            }});
            this.setVisible(true);
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Este método confirmará la salida del programa
     */
    public void confirmarSalida(){
        //primero se checa si el archivo no es null
        if(!txtCodigoC.getText().equals("")){
            //checar si el archivo actual esta guardado
            if(verificarArchivoGuardar == false){
                int confirmacion = JOptionPane.showConfirmDialog(null, "Alto ahí!!! ¿Deseas guardar tu archivo?",
                        "Guardar", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

                // 0=ok, 2=cancel
                if(confirmacion == 0){
                    //guarda el contenido
                    //si el archivo no existe, se guardará como nuevo
                    if(archivoActual == null){
                        ventanaGuardar();
                    }
                    else{
                        //simplemente se guarda
                        escribirArchivo();
                    }
                }
            }
        }
        
        //simplemente preguntará si se quiere salir y hacer las configuraciones necesarias
        int input = JOptionPane.showConfirmDialog(null, "¿Deseas salir del programa?", "Salir", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);

        // 0=ok, 2=cancel
        if(input == 0){
            //cerrar programa
            System.exit(0);
        }
    }
    
    /**
     * Método para encontrar las últimas cadenas
     */
    private int findLastNonWordChar(String text, int index){
        //encontrar las últimas
        while(--index >= 0){
            // \\ = [A-Za-z0-9]
            if(String.valueOf(text.charAt(index)).matches("\\W")){
                break;
            }
        }
        
        //saber donde nos encontramos
        return index;
    }
    
    /**
     * Método para encontrar las primeras cadenas
     */
    private int findFirstNonWordChar(String text, int index){
        //encontrar las últimas
        while(index < text.length()){
            // \\ = [A-Za-z0-9]
            if(String.valueOf(text.charAt(index)).matches("\\W")){
                break;
            }
            index++;
        }
        
        //saber donde nos encontramos
        return index;
    }
    
    /**
     * Método para pintar las palabras reservadas
     */
    private void colorDePalabrasReservadas(){
        final StyleContext cont = StyleContext.getDefaultStyleContext();
        
        //colores (se declaran en RGB)
        final AttributeSet att_rojo = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 10, 0));
        final AttributeSet att_verdeClaro = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 255, 0));
        final AttributeSet att_cafe = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(128, 0, 0));
        final AttributeSet att_aqua = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(0, 255, 255));
        final AttributeSet att_blanco = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 255, 255));
        final AttributeSet att_amarillo = cont.addAttribute(cont.getEmptySet(), StyleConstants.Foreground, new Color(255, 255, 0));
        
        //estilo
        DefaultStyledDocument doc = new DefaultStyledDocument(){
            public void insertString(int offset, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offset, str, a);
                
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offset);
                
                if(before < 0){
                    before = 0;
                }
                
                int after = findFirstNonWordChar(text, offset+str.length());
                int wordL = before;
                int wordR = before;
                
                while(wordR <= after){
                    if(wordR == after || String.valueOf(text.charAt(wordR)).matches("\\W")){
                        if(text.substring(wordL, wordR).matches("(\\W)*(if|else|do|while|for|switch|case|break|"
                                + "continue|default|try|catch)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_aqua, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(true|false|null)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_rojo, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(void|bit|short|int|long|float|double|char)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_amarillo, false);
                        }
                        else if(text.substring(wordL, wordR).matches("(\\W)*(main|printf|scanf|pow|sqrt|getch)")){
                            setCharacterAttributes(wordL, wordR - wordL, att_verdeClaro, false);
                        }
                        else {
                            setCharacterAttributes(wordL, wordR - wordL, att_blanco, false);
                        }
                        
                        wordL = wordR;
                    }
                    wordR++;
                }
            }
            
            public void remove(int offs, int len) throws BadLocationException {
                super.remove(offs, len);
                
                String text = getText(0, getLength());
                int before = findLastNonWordChar(text, offs);
                
                if(before < 0){
                    before = 0;
                }
            }
        };
        
        JTextPane txt = new JTextPane(doc);
        String temp = txtCodigoC.getText();
        txtCodigoC.setStyledDocument(txt.getStyledDocument());
        txtCodigoC.setText(temp);
    }
    
    private void analizarLexico() throws IOException{
        int cont = 1;
        
        String expr = (String) txtCodigoC.getText();
        claseLexer lexer = new claseLexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\t\tSIMBOLO\n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtSalida.setForeground(Color.white);
                txtSalida.setText(resultado);
                return;
            }
            switch (token) {
                case SALTO_DE_LINEA:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case COMILLAS:
                    resultado += "  <Comillas>\t\t\t" + lexer.lexeme + "\n";
                    break;
                case COMILLA_SIMPLE:
                    resultado += "  <Comilla simple>\t\t" + lexer.lexeme + "\n";
                    break;
                case TIPO_DE_DATO:
                    resultado += "  <Tipo de dato>\t\t" + lexer.lexeme + "\n";
                    break;
                case CHAR:
                    resultado += "  <Char>\t\t\t" + lexer.lexeme + "\n";
                    break;
                case IF:
                    resultado += "  <Sentencia if>\t\t" + lexer.lexeme + "\n";
                    break;
                case ELSE:
                    resultado += "  <Sentencia else>\t\t" + lexer.lexeme + "\n";
                    break;
                case DO:
                    resultado += "  <Sentencia do>\t\t" + lexer.lexeme + "\n";
                    break;
                case WHILE:
                    resultado += "  <Sentencia while>\t\t" + lexer.lexeme + "\n";
                    break;
                case FOR:
                    resultado += "  <Sentencia for>\t\t" + lexer.lexeme + "\n";
                    break;
                case SWITCH:
                    resultado += "  <Sentencia switch>\t\t" + lexer.lexeme + "\n";
                    break;
                case CASE:
                    resultado += "  <Instrucción case>\t\t" + lexer.lexeme + "\n";
                    break;
                case BREAK:
                    resultado += "  <Instrucción break>\t\t" + lexer.lexeme + "\n";
                    break;
                case CONTINUE:
                    resultado += "  <Instrucción continue>\t\t" + lexer.lexeme + "\n";
                    break;
                case DEFAULT:
                    resultado += "  <Instrucción default>\t\t" + lexer.lexeme + "\n";
                    break;
                case MAS:
                    resultado += "  <Símbolo suma>\t\t" + lexer.lexeme + "\n";
                    break;
                case MENOS:
                    resultado += "  <Símbolo resta>\t\t" + lexer.lexeme + "\n";
                    break;
                case MULTIPLICACION:
                    resultado += "  <Símbolo multiplicar>\t\t" + lexer.lexeme + "\n";
                    break;
                case DIVISION:
                    resultado += "  <Símbolo división>\t\t" + lexer.lexeme + "\n";
                    break;
                case MODULO:
                    resultado += "  <Símbolo módulo>\t\t" + lexer.lexeme + "\n";
                    break;
                case OP_LOGICO:
                    resultado += "  <Operador lógico>\t\t" + lexer.lexeme + "\n";
                    break;
                case PARENTESIS_ABRIR:
                    resultado += "  <Abrir paréntesis>\t\t" + lexer.lexeme + "\n";
                    break;
                case PARENTESIS_CERRAR:
                    resultado += "  <Cerrar paréntesis>\t\t" + lexer.lexeme + "\n";
                    break;
                case CORCHETE_ABRIR:
                    resultado += "  <Abrir corchete>\t\t" + lexer.lexeme + "\n";
                    break;
                case CORCHETE_CERRAR:
                    resultado += "  <Cerrar corchete>\t\t" + lexer.lexeme + "\n";
                    break;
                case LLAVE_ABRIR:
                    resultado += "  <Abrir llave>\t\t" + lexer.lexeme + "\n";
                    break;
                case LLAVE_CERRAR:
                    resultado += "  <Cerrar llave>\t\t" + lexer.lexeme + "\n";
                    break;
                case OP_RELACIONAL:
                    resultado += "  <Operador relacional>\t\t" + lexer.lexeme + "\n";
                    break;
                case OP_ATRIBUCION:
                    resultado += "  <Operador atribución>\t\t" + lexer.lexeme + "\n";
                    break;
                case OP_INCRE_DECRE:
                    resultado += "  <Incremento / Decremento>\t" + lexer.lexeme + "\n";
                    break;
                case OP_BOOLEANO:
                    resultado += "  <Operador booleano>\t\t" + lexer.lexeme + "\n";
                    break;
                case PUNTO:
                    resultado += "  <Signo punto>\t\t" + lexer.lexeme + "\n";
                    break;
                case COMA:
                    resultado += "  <Signo coma>\t\t" + lexer.lexeme + "\n";
                    break;
                case DOS_PUNTOS:
                    resultado += "  <Signo dos puntos>\t\t" + lexer.lexeme + "\n";
                    break;
                case PUNTO_Y_COMA:
                    resultado += "  <Signo punto y coma>\t\t" + lexer.lexeme + "\n";
                    break;
                case ASIGNACION:
                    resultado += "  <Asignación>\t\t" + lexer.lexeme + "\n";
                    break;
                case METODO_PRINTF:
                    resultado += "  <Método printf>\t\t" + lexer.lexeme + "\n";
                    break;
                case METODO_SCANF:
                    resultado += "  <Método scanf>\t\t" + lexer.lexeme + "\n";
                    break;
                case METODO_POW:
                    resultado += "  <Método pow>\t\t" + lexer.lexeme + "\n";
                    break;
                case METODO_RAIZ:
                    resultado += "  <Método sqrt>\t\t" + lexer.lexeme + "\n";
                    break;
                case METODO_ESPERA:
                    resultado += "  <Método getch>\t\t" + lexer.lexeme + "\n";
                    break;
                case MAIN:
                    resultado += "  <Main del programa>\t\t" + lexer.lexeme + "\n";
                    break;
                case NUMERO:
                    resultado += "  <Número>\t\t\t" + lexer.lexeme + "\n";
                    break;
                case IDENTIFICADOR:
                    resultado += "  <Identificador>\t\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  < " + lexer.lexeme + " >\n";
                    break;
            }
        }
    }
    
    private void analisisDelCodigo() throws IOException{
        String expr = (String) txtCodigoC.getText();
        claseLexer lexer = new claseLexer(new StringReader(expr));
        String resultado = "";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtVariables.setText(resultado);
                return;
            }
            switch (token) {
//                case COMILLAS:
//                    resultado += "  <Se abre o cierra la declaración de una cadena>\n";
//                    break;
//                case COMILLA_SIMPLE:
//                    resultado += "  <Se abre o cierra la declaración de un caracter>\n";
//                    break;
//                case TIPO_DE_DATO:
//                    resultado += "  <Se declara una variable de tipo " + lexer.lexeme + ">\n";
//                    break;
//                case CHAR:
//                    resultado += "  <Se declara una variable de tipo char>\n";
//                    break;
//                case MAS:
//                    resultado += "  <Más>\n";
//                    break;
//                case MENOS:
//                    resultado += "  <Menos>\n";
//                    break;
//                case MULTIPLICACION:
//                    resultado += "  <Por>\n";
//                    break;
//                case DIVISION:
//                    resultado += "  <Entre>\n";
//                    break;
//                case MODULO:
//                    resultado += "  <Reciduo\n";
//                    break;
//                case CORCHETE_ABRIR:
//                    resultado += "  <Se abre corchete>\n";
//                    break;
//                case CORCHETE_CERRAR:
//                    resultado += "  <Se cierra corchete>\n";
//                    break;
//                case OP_ATRIBUCION:
//                    if(lexer.lexeme == "+="){
//                        resultado += "  <Se asigna con suma>\n";
//                    }
//                    if(lexer.lexeme == "-="){
//                        resultado += "  <Se asigna con resta>\n";
//                    }
//                    if(lexer.lexeme == "*="){
//                        resultado += "  <Se asigna con multipliación>\n";
//                    }
//                    if(lexer.lexeme == "/="){
//                        resultado += "  <Se asigna por división>\n";
//                    }
//                    if(lexer.lexeme == "%="){
//                        resultado += "  <Se asigna a través del residuo de la división>\n";
//                    }
//                    break;
//                case OP_INCRE_DECRE:
//                    if(lexer.lexeme == "++"){
//                        resultado += "  <Se incrementa>\n";
//                    }
//                    if(lexer.lexeme == "--"){
//                        resultado += "  <Se decrementa>\n";
//                    }
//                    break;
//                case OP_BOOLEANO:
//                    if(lexer.lexeme == "true"){
//                        resultado += "  <Verdadero>\n";
//                    }
//                    if(lexer.lexeme == "false"){
//                        resultado += "  <Falso>\n";
//                    }
//                    break;
//                case PUNTO:
//                    resultado += "  <Punto>\n";
//                    break;
//                case COMA:
//                    resultado += "  <Separador de elementos>\n";
//                    break;
//                case DOS_PUNTOS:
//                    resultado += "  <Sentencia etiquetada>\n";
//                    break;
//                case PUNTO_Y_COMA:
//                    resultado += "  <Fin de sentencia>\n";
//                    break;
//                case ASIGNACION:
//                    resultado += "  <Se asigna>\n";
//                    break;
//                case METODO_PRINTF:
//                    resultado += "  <Método para imprimir en pantalla>\t" + lexer.lexeme + "\n";
//                    break;
//                case METODO_SCANF:
//                    resultado += "  <Método para escanear>\t" + lexer.lexeme + "\n";
//                    break;
//                case METODO_POW:
//                    resultado += "  <Método para elevar a una potencia>\t" + lexer.lexeme + "\n";
//                    break;
//                case METODO_RAIZ:
//                    resultado += "  <Método para calcular raíz>\t" + lexer.lexeme + "\n";
//                    break;
//                case NUMERO:
//                    resultado += "  <Número " + lexer.lexeme + ">\n";
//                    break;
                case IDENTIFICADOR:
                    resultado += lexer.lexeme + " = \n";
                    break;
            }
        }
    }
    
    private void analizarSemantico() throws IOException{
        int cont = 1;

        String expr = (String) txtCodigoC.getText();
        claseLexer lexer = new claseLexer(new StringReader(expr));
        String resultado = "LINEA " + cont + "\n";
        while (true) {
            Tokens token = lexer.yylex();
            if (token == null) {
                txtSalida.setForeground(Color.white);
                txtSalida.setText(resultado);
                return;
            }
            switch (token) {
                case SALTO_DE_LINEA:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case COMILLAS:
                    resultado += "  <Se abre o cierra la declaración de una cadena>\n";
                    break;
                case COMILLA_SIMPLE:
                    resultado += "  <Se abre o cierra la declaración de un caracter>\n";
                    break;
                case TIPO_DE_DATO:
                    resultado += "  <Se declara una variable de tipo " + lexer.lexeme + ">\n";
                    break;
                case CHAR:
                    resultado += "  <Se declara una variable de tipo char>\n";
                    break;
                case IF:
                    resultado += "  <Si...>\n";
                    break;
                case ELSE:
                    resultado += "  <Caso contrario...>\n";
                    break;
                case DO:
                    resultado += "  <Hacer...>\n";
                    break;
                case WHILE:
                    resultado += "  <Mientras...>\n";
                    break;
                case FOR:
                    resultado += "  <Para...>\n";
                    break;
                case SWITCH:
                    resultado += "  <Interruptor...>\n";
                    break;
                case CASE:
                    resultado += "  <Caso #>\n";
                    break;
                case BREAK:
                    resultado += "  <Romper>\n";
                    break;
                case CONTINUE:
                    resultado += "  <Continuar>\n";
                    break;
                case DEFAULT:
                    resultado += "  <Default>\n";
                    break;
                case MAS:
                    resultado += "  <Más>\n";
                    break;
                case MENOS:
                    resultado += "  <Menos>\n";
                    break;
                case MULTIPLICACION:
                    resultado += "  <Por>\n";
                    break;
                case DIVISION:
                    resultado += "  <Entre>\n";
                    break;
                case MODULO:
                    resultado += "  <Reciduo\n";
                    break;
                case OP_LOGICO:
                    if(lexer.lexeme == "&&"){
                        resultado += "  <Y>\n";
                    }
                    if(lexer.lexeme == "||"){
                        resultado += "  <O>\n";
                    }
                    if(lexer.lexeme == "!"){
                        resultado += "  <Negado>\n";
                    }
                    if(lexer.lexeme == "&"){
                        resultado += "  <Y>\n";
                    }
                    if(lexer.lexeme == "|"){
                        resultado += "  <O>\n";
                    }
                    break;
                case PARENTESIS_ABRIR:
                    resultado += "  <Se abre paréntesis>\n";
                    break;
                case PARENTESIS_CERRAR:
                    resultado += "  <Se cierra paréntesis>\n";
                    break;
                case CORCHETE_ABRIR:
                    resultado += "  <Se abre corchete>\n";
                    break;
                case CORCHETE_CERRAR:
                    resultado += "  <Se cierra corchete>\n";
                    break;
                case LLAVE_ABRIR:
                    resultado += "  <Se abre llave>\n";
                    break;
                case LLAVE_CERRAR:
                    resultado += "  <Se cierra llave>\n";
                    break;
                case OP_RELACIONAL:
                    if(lexer.lexeme == ">"){
                        resultado += "  <Mayor que>\n";
                    }
                    if(lexer.lexeme == "<"){
                        resultado += "  <Menor que>\n";
                    }
                    if(lexer.lexeme == "=="){
                        resultado += "  <Es igual a>\n";
                    }
                    if(lexer.lexeme == "!="){
                        resultado += "  <Diferente de>\n";
                    }
                    if(lexer.lexeme == ">="){
                        resultado += "  <Mayor o igual a>\n";
                    }
                    if(lexer.lexeme == "<="){
                        resultado += "  <Menor o igual a>\n";
                    }
                    if(lexer.lexeme == "<<"){
                        resultado += "  <Corrimiento de bits a la izquierda>\n";
                    }
                    if(lexer.lexeme == ">>"){
                        resultado += "  <Corrimiento de bits a la derecha>\n";
                    }
                    break;
                case OP_ATRIBUCION:
                    if(lexer.lexeme == "+="){
                        resultado += "  <Se asigna con suma>\n";
                    }
                    if(lexer.lexeme == "-="){
                        resultado += "  <Se asigna con resta>\n";
                    }
                    if(lexer.lexeme == "*="){
                        resultado += "  <Se asigna con multipliación>\n";
                    }
                    if(lexer.lexeme == "/="){
                        resultado += "  <Se asigna por división>\n";
                    }
                    if(lexer.lexeme == "%="){
                        resultado += "  <Se asigna a través del residuo de la división>\n";
                    }
                    break;
                case OP_INCRE_DECRE:
                    if(lexer.lexeme == "++"){
                        resultado += "  <Se incrementa>\n";
                    }
                    if(lexer.lexeme == "--"){
                        resultado += "  <Se decrementa>\n";
                    }
                    break;
                case OP_BOOLEANO:
                    if(lexer.lexeme == "true"){
                        resultado += "  <Verdadero>\n";
                    }
                    if(lexer.lexeme == "false"){
                        resultado += "  <Falso>\n";
                    }
                    break;
                case PUNTO:
                    resultado += "  <Punto>\n";
                    break;
                case COMA:
                    resultado += "  <Separador de elementos>\n";
                    break;
                case DOS_PUNTOS:
                    resultado += "  <Sentencia etiquetada>\n";
                    break;
                case PUNTO_Y_COMA:
                    resultado += "  <Fin de sentencia>\n";
                    break;
                case ASIGNACION:
                    resultado += "  <Se asigna>\n";
                    break;
                case METODO_PRINTF:
                    resultado += "  <Método para imprimir en pantalla>\t" + lexer.lexeme + "\n";
                    break;
                case METODO_SCANF:
                    resultado += "  <Método para escanear>\t" + lexer.lexeme + "\n";
                    break;
                case METODO_POW:
                    resultado += "  <Método para elevar a una potencia>\t" + lexer.lexeme + "\n";
                    break;
                case METODO_RAIZ:
                    resultado += "  <Método para calcular raíz>\t" + lexer.lexeme + "\n";
                    break;
                case METODO_ESPERA:
                    resultado += "  <Método para esperar>\t" + lexer.lexeme + "\n";
                    break;
                case MAIN:
                    resultado += "  <Punto de entrada de la aplicación>\n";
                    break;
                case NUMERO:
                    resultado += "  <Número " + lexer.lexeme + ">\n";
                    break;
                case IDENTIFICADOR:
                    resultado += "  <Nombre de la variable [" + lexer.lexeme + "]>\n";
                    break;
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  < " + lexer.lexeme + " >\n";
                    break;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try
                {
                    UIManager.setLookAndFeel(new FlatIntelliJLaf());
                    new IDE().setVisible(true);
                } catch (UnsupportedLookAndFeelException ex)
                {
                    Logger.getLogger(IDE.class.getName()
                    ).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemAbrirArchivo;
    private javax.swing.JMenuItem itemAnalisisLexico;
    private javax.swing.JMenuItem itemAnalisisSemantico;
    private javax.swing.JMenuItem itemAnalisisSintactico;
    private javax.swing.JMenuItem itemCerrar;
    private javax.swing.JMenuItem itemCopiar;
    private javax.swing.JMenuItem itemCortar;
    private javax.swing.JMenuItem itemEjecutarTodo;
    private javax.swing.JMenuItem itemGuardar;
    private javax.swing.JMenuItem itemGuardarComo;
    private javax.swing.JMenuItem itemLimpiarSalida;
    private javax.swing.JMenuItem itemNuevo;
    private javax.swing.JMenuItem itemPegar;
    private javax.swing.JMenuItem itemSalir;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.edisoncor.gui.label.LabelRect lblCodigo;
    private org.edisoncor.gui.label.LabelRect lblSalida;
    private org.edisoncor.gui.label.LabelRect lblVariables;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuBar menuArriba;
    private javax.swing.JMenu menuCompilar;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JMenu menuEjecutar;
    private javax.swing.JPanel panelDeVentanas;
    private javax.swing.JTextPane txtCodigoC;
    private javax.swing.JTextArea txtSalida;
    private javax.swing.JTextPane txtVariables;
    // End of variables declaration//GEN-END:variables

}
